name: Terraform Pipeline
on:
  pull_request:
    types: [opened, reopened, synchronize]
jobs:
  terraform-cloud:
      name: "TF pipeline PR-${{github.event.pull_request.number}}"
      runs-on: ubuntu-latest
      strategy:
        matrix:
          tf_version: ['1.0.9']
          root_dir:
            - infrastructure
      steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ matrix.tf_version }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Terraform Init
        id: init
        run: terraform -chdir=${{ matrix.root_dir }} init
      - name: Terraform Format
        id: fmt
        run: terraform -chdir=${{ matrix.root_dir }} fmt -check
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=${{ matrix.root_dir }} validate -no-color
      - name: Terraform Plan
        id: plan
        run: terraform -chdir=${{ matrix.root_dir }} plan -no-color
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary> Plan: ${{ matrix.root_dir }}</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
